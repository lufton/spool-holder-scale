substitutions:
  time_zone: Europe/Kyiv

esphome:
  name: spool-holder-scale
  friendly_name: ${friendly_name}
  on_boot:
    priority: 250
    then:
      - script.execute: get_spool_weight

packages:
  base: !include locales/base.yaml
  ua: !include locales/ua.yaml

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

logger:

api:

ota:
  password: !secret ota_password

web_server:

uart:
  rx_pin: GPIO23
  baud_rate: 9600

rdm6300:
  on_tag:
    if:
      condition:
        lambda: return x != id(tag_id) || !id(confirmed_spool).state;
      then:
        - globals.set:
            id: tag_id
            value: !lambda return x;
        - http_request.get:
            url: !lambda return (id(base_url).state + "/spool?lot_nr=" + to_string(id(tag_id))).c_str();
            verify_ssl: false
            on_response:
              lambda: |-
                DynamicJsonDocument doc(2048);
                deserializeJson(doc, id(http_client).get_string());
                JsonArray spools = doc.as<JsonArray>();
                if (spools.size() > 0) id(spool_id).publish_state(spools[0]["id"].as<int>());

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 0s

  ap:
    ssid: "Spool-Holder-Scale"
    password: !secret wifi_ap_password
    ap_timeout: 15s

captive_portal:

http_request:
  id: http_client

i2c:
  sda: GPIO5
  scl: GPIO18

time:
  - platform: sntp
    id: sntp_time
    timezone: ${time_zone}
    on_time:
      - seconds: /5
        then:
          if:
            condition:
              lambda: return id(filament_weight).has_state() && !isnan(id(filament_weight).state) && id(filament_weight).state <= id(low_weight_alert).state;
            then:
              script.execute: long_beep

font:
- id: menu_font
  file: "fonts/Retro Gaming.ttf"
  size: 11
  glyphs: |-
    !"%()+=,-_.…:°'/&<0123456789АБВГДЕЄЁЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ абвгдеєёжзиіїйклмнопрстуфхцчшщьыъэюяabcdefghijklmnopqrstuvwxyz
- id: main_font
  file: "fonts/Retro Gaming.ttf"
  size: 22
  glyphs: |-
    !"%()+=,-_.…:°'/&<0123456789АБВГДЕЄЁЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ абвгдеєёжзиіїйклмнопрстуфхцчшщьыъэюяabcdefghijklmnopqrstuvwxyz

graph:
  - id: filament_weight_graph
    sensor: filament_weight
    duration: 3h
    border: true
    x_grid: 1h
    width: 128
    height: 48
    min_value: 0

display:
  - platform: ssd1306_i2c
    id: oled_display
    model: "SSD1306 128x64"
    address: 0x3C
    rotation: 180
    pages:
      - id: overview_page
        lambda: |-
          it.print(0, 00, id(menu_font), "${tare}:");
          it.print(0, 15, id(menu_font), "${spool}:");
          it.print(0, 31, id(menu_font), "${filament}:");
          it.print(0, 47, id(menu_font), "${total}:");
          it.printf(it.get_width(), 00, id(menu_font), TextAlign::TOP_RIGHT, "%.3f ${kg}", id(tare_weight).state);
          if (!id(spool_weight).has_state() || isnan(id(spool_weight).state)) it.print(it.get_width(), 15, id(menu_font), TextAlign::TOP_RIGHT, "-.--- ${kg}");
          else it.printf(it.get_width(), 15, id(menu_font), TextAlign::TOP_RIGHT, "%.3f ${kg}", id(spool_weight).state);
          if (!id(filament_weight).has_state() || isnan(id(filament_weight).state)) it.print(it.get_width(), 31, id(menu_font), TextAlign::TOP_RIGHT, "-.--- ${kg}");
          else it.printf(it.get_width(), 31, id(menu_font), TextAlign::TOP_RIGHT, "%.3f ${kg}", id(filament_weight).state);
          it.printf(it.get_width(), 47, id(menu_font), TextAlign::TOP_RIGHT, "%.3f ${kg}", id(total_weight).state);
      - id: filament_weight_page
        lambda: |-
          it.print(it.get_width() / 2, 0, id(main_font), TextAlign::TOP_CENTER, "${filament}");
          if (id(filament_weight).has_state() && !isnan(id(filament_weight).state)) it.printf(it.get_width() / 2, it.get_height() / 2, id(main_font), TextAlign::TOP_CENTER, "%.3f ${kg}", id(filament_weight).state);
          else it.print(it.get_width() / 2, it.get_height() / 2, id(main_font), TextAlign::TOP_CENTER, "-.--- ${kg}");
      - id: filament_weight_graph_page
        lambda: |-
          if (!id(filament_weight).has_state() || isnan(id(filament_weight).state)) it.print(it.get_width() / 2, 0, id(menu_font), TextAlign::TOP_CENTER, "-.--- ${kg}");
          else it.printf(it.get_width() / 2, 0, id(menu_font), TextAlign::TOP_CENTER, "%.3f ${kg}", id(filament_weight).state);
          it.graph(0, 16, id(filament_weight_graph));
      - id: calibration_instructions_page
        lambda: |-
          it.print(it.get_width() / 2, 00, id(menu_font), TextAlign::TOP_CENTER, "${calibration_instructions_line_1}");
          it.print(it.get_width() / 2, 15, id(menu_font), TextAlign::TOP_CENTER, "${calibration_instructions_line_2}");
          it.print(it.get_width() / 2, 31, id(menu_font), TextAlign::TOP_CENTER, "${calibration_instructions_line_3}");
          it.print(it.get_width() / 2, 47, id(menu_font), TextAlign::TOP_CENTER, "${calibration_instructions_line_4}");

graphical_display_menu:
  id: main_menu
  display: oled_display
  on_redraw:
    then:
      component.update: oled_display
  active: false
  mode: rotary
  font: menu_font
  items:
    - type: menu
      text: ${spool}
      items:
        - type: switch
          text: ${synchronization}
          switch: synchronization
        - type: number
          text: ${id}
          number: spool_id
          format: "%.0f"
        - type: custom
          text: ${weight}
          value_lambda: return value_accuracy_to_string(id(spool_weight).state, 3) + " ${kg}";
        - type: switch
          text: ${confirmed}
          switch: confirmed_spool
        - type: back
          text: ${back}
    - type: menu
      text: ${calibration}
      items:
        - type: custom
          text: ${tare}
          value_lambda: return value_accuracy_to_string(id(tare_weight).state, 3) + " ${kg}";
          on_enter:
            number.set:
              id: tare_weight
              value: !lambda return round(id(total_weight).state * 1000) / 1000;
          on_prev:
            number.decrement:
              id: tare_weight
          on_next:
            number.increment:
              id: tare_weight
        - type: menu
          text: ${point} 1
          items:
            - type: number
              text: ${weight} 1
              number: calibration_weight_1
              format: "%.3f"
            - type: command
              text: ${save}
              on_value:
                script.execute: calibrate1
            - type: back
              text: ${back}
          on_enter:
            - script.execute: short_beep
            - display.page.show: calibration_instructions_page
        - type: menu
          text: ${point} 2
          items:
            - type: number
              text: ${weight} 2
              number: calibration_weight_2
              format: "%.3f"
            - type: command
              text: ${save}
              on_value:
                script.execute: calibrate2
            - type: back
              text: ${back}
          on_enter:
            - script.execute: short_beep
            - display.page.show: calibration_instructions_page
        - type: back
          text: ${back}
    - type: menu
      text: ${screen}
      items:
        - type: number
          text: ${brightness}
          number: brightness
          format: "%.0f"
          on_leave:
            script.execute: update_brightness
        - type: back
          text: ${back}
    - type: switch
      text: ${sound}
      switch: sound
    - type: command
      text: ${exit}
      on_value:
        display_menu.hide: main_menu

sensor:
  - platform: wifi_signal
    name: WiFi signal
    update_interval: 5s
  - platform: hx711
    id: raw_weight
    name: Raw weight
    dout_pin: GPIO16
    clk_pin: GPIO17
    gain: 128
    update_interval: 500ms
    on_value:
      - component.update: total_weight
      - component.update: tared_weight
      - component.update: filament_weight
      - component.update: filtered_filament_weight
    filters:
      median:
        window_size: 5
        send_every: 5
        send_first_at: 1
  - platform: template
    id: total_weight
    name: Total weight
    unit_of_measurement: " ${kg}"
    device_class: WEIGHT
    accuracy_decimals: 3
    lambda: |-
      float y2 = id(calibration_weight_2).state;
      float y1 = id(calibration_weight_1).state;
      float x2 = id(calibration_value_2).state;
      float x1 = id(calibration_value_1).state;
      float k = (y2 - y1) / (x2 - x1);
      float x = id(raw_weight).state;
      float b = y1 - k * x1;
      return round((k * x + b) * 1000.0) / 1000.0;
    update_interval: never
    filters:
      - clamp:
          min_value: 0.000
          max_value: 5.000
          ignore_out_of_range: true
  - platform: template
    id: tared_weight
    name: Tared weight
    unit_of_measurement: " ${kg}"
    device_class: WEIGHT
    accuracy_decimals: 3
    lambda: |-
      if (id(total_weight).has_state() && !isnan(id(total_weight).state)) return id(total_weight).state - id(tare_weight).state;
      else return NAN;
    update_interval: never
    on_value_range: 
      below: 0.005
      then:
        switch.turn_off: confirmed_spool
  - platform: template
    id: filament_weight
    name: Filament weight
    unit_of_measurement: " ${kg}"
    device_class: WEIGHT
    accuracy_decimals: 3
    lambda: |-
      if (id(spool_weight).has_state() && !isnan(id(spool_weight).state) && id(spool_weight).state > 0) return id(tared_weight).state - id(spool_weight).state;
      else return NAN;
    update_interval: never
  - platform: template
    id: filtered_filament_weight
    name: Filtered filament weight
    unit_of_measurement: " ${kg}"
    device_class: WEIGHT
    accuracy_decimals: 3
    lambda: |-
      if (id(filament_weight).has_state() && !isnan(id(filament_weight).state) && id(confirmed_spool).state) return id(filament_weight).state;
      else return NAN;
    update_interval: never
    filters:
      median:
        window_size: 21
        send_every: 21
        send_first_at: 11
    on_value:
      if:
        condition:
          lambda: return id(synchronization).state && id(spool_id).state > 0;
        then:
          - http_request.send:
              url: !lambda return (id(base_url).state + "/spool/" + value_accuracy_to_string(id(spool_id).state, 0)).c_str();
              method: PATCH
              headers:
                Content-Type: application/json
              json: |-
                root["remaining_weight"] = value_accuracy_to_string(id(filtered_filament_weight).state * 1000.0, 3);
                root["last_used"] = id(sntp_time).now().strftime("%Y-%m-%dT%H:%M:%S");
                if (id(new_spool)) root["first_used"] = id(sntp_time).now().strftime("%Y-%m-%dT%H:%M:%S");
              verify_ssl: false
          - globals.set:
              id: new_spool
              value: 'false'
  - platform: rotary_encoder
    id: encoder
    pin_a: GPIO34
    pin_b: GPIO35
    filters:
      debounce: 30ms
    on_anticlockwise:
      - script.execute: short_beep
      - script.execute: delayed_close_main_menu
      - if:
          condition:
            display_menu.is_active: main_menu
          then:
            display_menu.up: main_menu
          else:
            display.page.show_previous: oled_display
    on_clockwise:
      - script.execute: short_beep
      - script.execute: delayed_close_main_menu
      - if:
          condition:
            display_menu.is_active: main_menu
          then:
            display_menu.down: main_menu
          else:
            display.page.show_next: oled_display

globals:
  - id: new_spool
    type: bool
    initial_value: "false"
  - id: tag_id
    type: int

binary_sensor:
  - platform: gpio
    id: encoder_button
    pin: GPIO32
    filters:
      - delayed_on: 30ms
      - delayed_off: 30ms
    on_press:
      - script.execute: delayed_close_main_menu
      - if:
          condition:
            display.is_displaying_page: calibration_instructions_page
          then:
            - display.page.show: filament_weight_page
            - display_menu.show: main_menu
          else:
            if:
              condition:
                display_menu.is_active: main_menu
              then:
                - script.execute: short_beep
                - display_menu.enter: main_menu
              else:
                - script.execute: short_beep
                - display_menu.show_main: main_menu

script:
  - id: delayed_close_main_menu
    then:
      - delay: 60s
      - display_menu.hide:
    mode: restart
  - id: update_brightness
    then:
      lambda: |-
        id(oled_display).set_brightness(id(brightness).state / 100.0);
        id(oled_display).setup();
  - id: short_beep
    then:
      if:
        condition:
          switch.is_on: sound
        then:
          - switch.turn_on: buzzer
          - switch.turn_off: buzzer
  - id: long_beep
    then:
      if:
        condition:
          switch.is_on: sound
        then:
          - switch.turn_on: buzzer
          - delay: 200ms
          - switch.turn_off: buzzer
  - id: get_spool_weight
    then:
      if:
        condition:
          switch.is_on: synchronization
        then:
          http_request.get:
            url: !lambda return (id(base_url).state + "/spool/" + value_accuracy_to_string(id(spool_id).state, 0)).c_str();
            verify_ssl: false
            on_response:
              lambda: |-
                json::parse_json(id(http_client).get_string(), [](JsonObject root) {
                  if (root.containsKey("filament") && root["filament"].containsKey("spool_weight")) id(spool_weight).publish_state(root["filament"]["spool_weight"].as<float>() / 1000.0);
                  if (!root.containsKey("first_used")) id(new_spool) = true;
                });
    mode: restart
  - id: calibrate1
    then:
      - number.set:
          id: calibration_value_1
          value: !lambda return id(raw_weight).state;
      - script.execute: long_beep
  - id: calibrate2
    then:
      - number.set:
          id: calibration_value_2
          value: !lambda return id(raw_weight).state;
      - script.execute: long_beep

number:
  - platform: template
    id: tare_weight
    name: Tare weight
    unit_of_measurement: " ${kg}"
    device_class: WEIGHT
    optimistic: true
    initial_value: 0.000
    min_value: 0.000
    max_value: 5.000
    step: 0.001
    mode: box
    restore_value: true
  - platform: template
    id: spool_weight
    name: Spool weight
    unit_of_measurement: " ${kg}"
    device_class: WEIGHT
    optimistic: true
    initial_value: nan
    min_value: 0.000
    max_value: 5.000
    step: 0.001
    mode: box
    restore_value: false
  - platform: template
    id: calibration_value_1
    name: Calibration value 1
    optimistic: true
    initial_value: 0
    min_value: 0
    max_value: 9999999
    step: 1
    mode: box
    restore_value: true
  - platform: template
    id: calibration_value_2
    name: Calibration value 2
    optimistic: true
    initial_value: 0
    min_value: 0
    max_value: 9999999
    step: 1
    mode: box
    restore_value: true
  - platform: template
    id: calibration_weight_1
    name: Calibration weight 1
    unit_of_measurement: " ${kg}"
    device_class: WEIGHT
    optimistic: true
    initial_value: 0.000
    min_value: 0.000
    max_value: 5.000
    step: 0.001
    mode: box
    restore_value: true
  - platform: template
    id: calibration_weight_2
    name: Calibration weight 2
    unit_of_measurement: " ${kg}"
    device_class: WEIGHT
    optimistic: true
    initial_value: 1.000
    min_value: 0.000
    max_value: 5.000
    step: 0.001
    mode: box
    restore_value: true
  - platform: template
    id: brightness
    name: Brightness
    unit_of_measurement: "%"
    optimistic: true
    initial_value: 100
    min_value: 5
    max_value: 100
    step: 5
    mode: box
    restore_value: true
    on_value:
      if:
        condition:
          display_menu.is_active: main_menu
        else: 
          script.execute: update_brightness
  - platform: template
    id: low_weight_alert
    name: Low weight alert
    unit_of_measurement: " ${kg}"
    device_class: WEIGHT
    optimistic: true
    initial_value: 0.020
    min_value: 0.000
    max_value: 5.000
    step: 0.001
    mode: box
    restore_value: true
  - platform: template
    id: spool_id
    name: Spool ID
    optimistic: true
    min_value: 0
    max_value: 999999
    step: 1
    mode: box
    restore_value: true
    on_value:
      if:
        condition:
          lambda: return x > 0;
        then:
          - switch.turn_on: confirmed_spool
          - script.execute: get_spool_weight
        else:
          - switch.turn_off: confirmed_spool
          - lambda: id(spool_weight).publish_state(NAN);

text:
  - platform: template
    id: base_url
    name: Base URL
    optimistic: true
    mode: text
    restore_value: true

switch:
  - platform: template
    id: sound
    name: Sound
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
  - platform: template
    id: synchronization
    name: Synchronization
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
  - platform: gpio
    id: buzzer
    pin: GPIO13
    internal: true
    inverted: true
    on_turn_on: 
      - delay: 1s
      - switch.turn_off: buzzer
  - platform: template
    id: confirmed_spool
    name: Сonfirmed spool
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

button:
  - platform: template
    name: Сalibrate 1
    on_press:
      script.execute: calibrate1
  - platform: template
    name: Сalibrate 2
    on_press:
      script.execute: calibrate2
